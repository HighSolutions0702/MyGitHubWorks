package com.obs.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItemIterator;
import org.apache.commons.fileupload.FileItemStream;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.obs.model.User;
import com.obs.model.UserProfileImages;
import com.obs.service.IUserProfileService;
import com.obs.service.IUserService;
import com.obs.service.UserProfileService;
import com.obs.service.UserService;
import com.obs.webservice.LoginServiceHelper;
import com.obs.webservice.messages.ResponseStatus;
import com.obs.webservice.messages.ResponseStatusCode;


public class ImageUpload extends HttpServlet {
	private static final long serialVersionUID = -8244073279641189889L;

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		try {
			IUserService userService = new UserService();
			IUserProfileService userProfileService = new UserProfileService();
			String fileName =null;
			String coverFileName =null;
			User user=new User();
			if (req.getHeader("Content-Type") != null
					&& req.getHeader("Content-Type").startsWith("multipart/form-data")) {
				//get user from token and create a folder in temp dir
				String token = req.getParameter("token");
				int userId = new LoginServiceHelper().getUserByToken(token);
				user=userService.getUserById(userId);
				new File(CommonProperties.getBasePath()+"files"+"/"+"usm"+"/"+"images"+"/"+userId).mkdirs();
				new File(CommonProperties.getBasePath()+"files"+"/"+"usm"+"/"+"coverimages"+"/"+userId).mkdirs();
				//profile image upload against login user
				if(user!=null){
					UserProfileImages userProfileObj=userProfileService.getUserProfileById(user.getId());
					if(userProfileObj != null  )
					{
						ServletFileUpload upload = new ServletFileUpload();
						FileItemIterator iterator = upload.getItemIterator(req);
						while (iterator.hasNext()) {
							FileItemStream item = iterator.next();
							if("myFile".equals(item.getFieldName())){
								fileName = item.getName();
								userProfileObj.setProfileImage(fileName);
								IoUtils.getInstance().writeFileFromInputStream(item.openStream(),new File(CommonProperties.getBasePath()+"files"+"/"+"usm"+"/"+"images"+"/"+userId+"/"+fileName));
							}
							if("myFile1".equals(item.getFieldName()))
							{
								coverFileName=item.getName();
								userProfileObj.setCoverImage(coverFileName);
								IoUtils.getInstance().writeFileFromInputStream(item.openStream(),new File(CommonProperties.getBasePath()+"files"+"/"+"usm"+"/"+"coverimages"+"/"+userId+"/"+coverFileName));
							}
							userProfileObj.setUser(user);
							userProfileObj.setIsDeleted(false);
							userProfileService.updateUserProfile(userProfileObj);
						}
					}
					else
					{
						UserProfileImages userProfile=new UserProfileImages();
						ServletFileUpload upload = new ServletFileUpload();
						FileItemIterator iterator = upload.getItemIterator(req);
						while (iterator.hasNext()) {
							FileItemStream item = iterator.next();
							if("myFile".equals(item.getFieldName())){
								fileName = item.getName();
								userProfile.setProfileImage(fileName);
								IoUtils.getInstance().writeFileFromInputStream(item.openStream(),new File(CommonProperties.getBasePath()+"files"+"/"+"usm"+"/"+"images"+"/"+userId+"/"+fileName));
							}
							if("myFile1".equals(item.getFieldName()))
							{
								coverFileName=item.getName();
								userProfile.setCoverImage(coverFileName);
								IoUtils.getInstance().writeFileFromInputStream(item.openStream(),new File(CommonProperties.getBasePath()+"files"+"/"+"usm"+"/"+"coverimages"+"/"+userId+"/"+coverFileName));
							}
							userProfile.setUser(user);
							userProfile.setIsDeleted(false);
							userProfileService.addProfileImage(userProfile);
						}
					}
				}
			} 
			res.getWriter().write(ResponseStatusCode.STATUS_OK);

		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println(ex.getMessage());
			throw new ServletException(ex);
		}
	}

	protected int size(InputStream stream) {
		int length = 0;
		try {
			byte[] buffer = new byte[2048];
			int size;
			while ((size = stream.read(buffer)) != -1) {
				length += size;
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		return length;

	}

	protected String read(InputStream stream) {
		StringBuilder sb = new StringBuilder();
		BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
		try {
			String line;
			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
			}
		}
		return sb.toString();

	}
}
