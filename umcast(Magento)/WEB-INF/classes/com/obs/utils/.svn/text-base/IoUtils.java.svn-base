package com.obs.utils;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;

import javax.imageio.ImageIO;

import org.apache.log4j.Logger;



public class IoUtils {

	private static final int DEFAULT_BUFFER_SIZE = 1024;

	/**
	 * singleton instance
	 */
	private static IoUtils myInstance = null;
	public static IoUtils getInstance()
	{
		if(myInstance == null)
			myInstance = new IoUtils();
		return myInstance;
	}

	private int bufferSize = 1024;

	/**
	 * Logger Instantiated for Log Management
	 */
	private static final Logger log					= Logger.getLogger(IoUtils.class);

	public IoUtils() {
		this(DEFAULT_BUFFER_SIZE);
	}

	public IoUtils(int bufferSize) { 
		this.bufferSize = bufferSize;
	}

	public String read(String filePath) throws IOException {
		FileInputStream       inputStream   = new FileInputStream(new File(filePath));
		ByteArrayOutputStream outputStream  = new ByteArrayOutputStream();
		copy(inputStream, outputStream);
		return outputStream.toString();
	}
	/**
	 * convert InputStream to String
	 * @param is
	 * @return String
	 */
	public String getStringFromInputStream(InputStream is) {

		BufferedReader br = null;
		StringBuilder sb = new StringBuilder();
		String line;
		try {
			br = new BufferedReader(new InputStreamReader(is));
			while ((line = br.readLine()) != null) {
				sb.append(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return sb.toString();
	}

	/**
	 * copy file 
	 * @param inputStream
	 * @param outputStream
	 * @return
	 * @throws IOException
	 */
	public int copy(InputStream inputStream, OutputStream outputStream) throws IOException {
		byte[] buffer = new byte[bufferSize];
		int totalBytesRead = 0;
		int bytesRead      = 0;
		while (-1 != (bytesRead = inputStream.read(buffer))) {
			outputStream.write(buffer, 0, bytesRead);
			totalBytesRead += bytesRead;
		}
		return totalBytesRead;
	}  

	/**
	 * extract Bytes
	 * @param ImagePath
	 * @return
	 * @throws IOException
	 */
	public byte[] extractBytes (String ImagePath) throws IOException {
		byte[] imageInByte =  null;
		File fnew=new File(ImagePath);
		if(fnew.isFile()){
			BufferedImage originalImage=ImageIO.read(fnew);
			ByteArrayOutputStream baos=new ByteArrayOutputStream();
			ImageIO.write(originalImage, getExtection(ImagePath), baos );
			imageInByte=baos.toByteArray();
		}
		return imageInByte;
	}

	/**
	 * get fileName Extection
	 * @param fileName
	 * @return
	 */
	public String getExtection(String fileName){
		int pos = fileName.lastIndexOf('.');
		String ext = fileName.substring(pos+1);
		return ext;
	}

	/**
	 * read All from reader
	 * @param Reader
	 * @return String
	 * @throws IOException
	 */
	private String readAll(Reader rd) throws IOException {
		StringBuilder sb = new StringBuilder();
		int cp;
		while ((cp = rd.read()) != -1) {
			sb.append((char) cp);
		}
		return sb.toString();
	}

	/**
	 * read json from url
	 * @param url as String
	 * @return String
	 * @throws Exception
	 */
	public String readJsonFromUrl(String url) throws Exception {
		InputStream is = new URL(url).openStream();
		try {
			BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
			String jsonText = readAll(rd);
			return jsonText;
		} finally {
			is.close();
		}
	}

	/**
	 * Write Images
	 * @param imagePath
	 * @param imageName
	 * @param data
	 * @return boolean
	 */
	public boolean writeImages(String imagePath,String imageName, InputStream data)
	{
		boolean flag = false;
		byte[] mediaData;
		BufferedImage image = null;
		ByteArrayInputStream imageStream = null;
		try {
			String ext = getExtection(imageName);
			mediaData = new byte[data.available()];
			// Write File //
			File photoFile = new File(imagePath);
			if(!photoFile.exists()) // Path Exists
				photoFile.mkdirs();
			data.read(mediaData);
			imageStream = new ByteArrayInputStream(mediaData);
			image = ImageIO.read(imageStream);
			flag = ImageIO.write(image, ext, new File(imagePath+"/"+imageName));

		} catch (IOException e) {
			e.printStackTrace();
			log.error("Error While writeImages:"+e);
		}
		finally
		{
			if(imageStream != null & image != null)
			{
				try {
					imageStream.close();
				} catch (IOException e) {
					e.printStackTrace();
					log.error("Error While writeImages:"+e);
				}
				image.flush();
			}
		}
		return flag;
	}

	/**
	 * Copy Folder and it's Files Source to Destination
	 * @param src
	 * @param dest
	 * @throws IOException
	 */
	public void copyFolder(File src, File dest) throws IOException{
		if(src.isDirectory()){
			//if directory not exists, create it
			if(!dest.exists()){
				dest.mkdir();
				log.info("Directory copied from "
						+ src + "  to " + dest);
			}
			//list all the directory contents
			String files[] = src.list();

			for (String file : files) {
				//construct the src and dest file structure
				File srcFile = new File(src, file);
				File destFile = new File(dest, file);
				//recursive copy
				copyFolder(srcFile,destFile);
			}
		}else{
			//if file, then copy it
			//Use bytes stream to support all file types
			InputStream in = new FileInputStream(src);
			OutputStream out = new FileOutputStream(dest);

			byte[] buffer = new byte[1024];

			int length;
			//copy the file content in bytes
			while ((length = in.read(buffer)) > 0){
				out.write(buffer, 0, length);
			}
			in.close();
			out.close();
			log.info("File copied from " + src + " to " + dest);
		}
	}

	/**
	 * write File From InputStream
	 * Use bytes stream to support all file types
	 * @param in
	 * @param dest
	 * @throws IOException
	 */
	public void writeFileFromInputStream(InputStream in,File dest) throws IOException{

		//if file, then copy it
		//Use bytes stream to support all file types
		OutputStream out = new FileOutputStream(dest);

		byte[] buffer = new byte[1024];

		int length;
		//copy the file content in bytes
		while ((length = in.read(buffer)) > 0){
			out.write(buffer, 0, length);
		}
		in.close();
		out.close();
		log.info("File copied to " + dest);

	}

	/**
	 * Delete directory and the files under
	 * @param path
	 */
	public void deleteDirectory(File path){
		if (path == null)
			return;
		if (path.exists())
		{
			for(File f : path.listFiles())
			{
				if(f.isDirectory()){
					deleteDirectory(f);
					f.delete();
				}
				else{
					f.delete();
				}
			}
			path.delete();
		}
	}

	/**
	 * return content type of a file
	 * @param extension
	 * @return String
	 */	
	public String getContentType(String extension)
	{
		if(extension.equals("pdf"))
		{
			return "application/pdf";
		}
		if(extension.equals("xls") || extension.equals("xlsx"))
		{
			return"application/vnd.ms-excel";
		}
		if(extension.equals("doc") || extension.equals("docx"))
		{
			return"application/msword";
		}
		if(extension.equals("gif"))
		{
			return "image/gif";
		}
		if(extension.equals("png"))
		{
			return "image/png";
		}
		if(extension.equals("jpg") || extension.equals("jpeg"))
		{
			return "image/jpeg";
		}
		if(extension.equals("tif") || extension.equals("tiff"))
		{
			return "image/tiff";
		}
		return "";
	}
}
