/**
 * 
 */
package com.obs.utils;

import java.util.Collection;

import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

/**
 * Represents a list which is not populated with objects until a method that actually requires an object is called -
 * this is particularly useful for lists that could require resource intensive operations to retrieve
 * 
 * @author Stephen
*/
public abstract class LazyList<E> implements List<E> {
	private List<E> list;

	protected List<E> getList() {
		return list;
	}

	protected void setList(List<E> theList) {
		list = theList;
	}
	
	protected abstract List<E> initializeList();
	
	protected void validate() {
		if(getList() == null) {
			setList(initializeList());
		}
	}
	
	public void reinitialize() {
		setList(null);
	}

	@Override
	public int size() {
		validate();
		return getList().size();
	}

	@Override
	public boolean isEmpty() {
		validate();
		return getList().isEmpty();
	}

	@Override
	public boolean contains(Object o) {
		validate();
		return getList().contains(o);
	}

	@Override
	public Iterator<E> iterator() {
		validate();
		return getList().iterator();
	}

	@Override
	public Object[] toArray() {
		validate();
		return getList().toArray();
	}

	@Override
	public <T> T[] toArray(T[] a) {
		validate();
		return getList().toArray(a);
	}

	@Override
	public boolean add(E e) {
		validate();
		return getList().add(e);
	}

	@Override
	public boolean remove(Object o) {
		validate();
		return getList().remove(o);
	}

	@Override
	public boolean containsAll(Collection<?> c) {
		validate();
		return getList().containsAll(c);
	}

	@Override
	public boolean addAll(Collection<? extends E> c) {
		validate();
		return getList().addAll(c);
	}

	@Override
	public boolean addAll(int index, Collection<? extends E> c) {
		validate();
		return getList().addAll(index, c);
	}

	@Override
	public boolean removeAll(Collection<?> c) {
		validate();
		return getList().removeAll(c);
	}

	@Override
	public boolean retainAll(Collection<?> c) {
		validate();
		return getList().retainAll(c);
	}

	@Override
	public void clear() {
		validate();
		getList().clear();
	}

	@Override
	public E get(int index) {
		validate();
		return getList().get(index);
	}

	@Override
	public E set(int index, E element) {
		validate();
		return getList().set(index, element);
	}

	@Override
	public void add(int index, E element) {
		validate();
		getList().add(index, element);
	}

	@Override
	public E remove(int index) {
		validate();
		return getList().remove(index);
	}

	@Override
	public int indexOf(Object o) {
		validate();
		return getList().indexOf(o);
	}

	@Override
	public int lastIndexOf(Object o) {
		validate();
		return getList().lastIndexOf(o);
	}

	@Override
	public ListIterator<E> listIterator() {
		validate();
		return getList().listIterator();
	}

	@Override
	public ListIterator<E> listIterator(int index) {
		validate();
		return getList().listIterator(index);
	}

	@Override
	public List<E> subList(int fromIndex, int toIndex) {
		validate();
		return getList().subList(fromIndex, toIndex);
	}

}
