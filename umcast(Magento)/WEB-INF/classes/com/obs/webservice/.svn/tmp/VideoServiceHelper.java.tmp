package com.obs.webservice;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.joda.time.DateTime;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Component;

import com.obs.aws.ManageAWSVideos;
import com.obs.model.Category;
import com.obs.model.User;
import com.obs.model.Video;
import com.obs.service.IUserService;
import com.obs.service.IVideoService;
import com.obs.service.UserService;
import com.obs.service.VideoService;
import com.obs.utils.CommonProperties;
import com.obs.utils.IoUtils;
import com.obs.utils.StringUtility;
import com.obs.webservice.messages.ResponseStatus;
import com.obs.webservice.messages.ResponseStatusCode;
import com.obs.webservice.messages.VideoMessage;
import com.obs.webservice.messages.VideosMessage;

@Component
public class VideoServiceHelper {

	private IVideoService videoService = new VideoService();
	LoginServiceHelper loginServiceHelper = LoginServiceHelper.getInstance();

	IoUtils ioUtils = IoUtils.getInstance();
	StringUtility stringUtility = StringUtility.getInstance();

	public final String AWS_URL= "https://s3.amazonaws.com/obs.1/";

	/**
	 * Singleton Instance
	 */
	private static VideoServiceHelper myInstance = null;
	public static VideoServiceHelper getInstance()
	{
		if(myInstance == null)
			myInstance = new VideoServiceHelper();
		return myInstance;
	}


	/**
	 * save Video
	 * @param is
	 * @return
	 */
	public VideoMessage saveVideo(InputStream is,String token) {
		ResponseStatus status = null;
		Video video = new Video();
		try{
			JSONObject value = stringUtility.getJSONObject(is);
			boolean flag = loginServiceHelper.checkToken(token);
			if(!flag){
				status = new ResponseStatus(ResponseStatusCode.STATUS_UNAUTHORIZED, "UNAUTHORIZED");
				return new VideoMessage(status, video);
			}
			int userId = loginServiceHelper.getUserByToken(token);
			if(userId>0){
				video.setVideoName((String) value.get("displayName"));
				video.setVideoDescription((String) value.get("videoDesc"));
<<<<<<< .mine
			//	video.setVideoCategory((String) value.get("videoCategory"));
=======
				Category cat = new Category();
				cat.setCategoryId(Integer.valueOf((String) value.get("videoCategory")));
				video.setVideoCategory(cat);
>>>>>>> .r170
				User owner = new User();
				owner.setId(userId);
				video.setOwner(owner);
				video.setUploaded_Date(new Date());

				//upload video in AWS bucket
<<<<<<< .mine
				FileInputStream       input   = new FileInputStream(new File(CommonProperties.getBasePath()+CommonProperties.getTempFilePath()+video.getVideoName()));
			//	new ManageAWSVideos().createFiles("obs."+userId, video.getVideoName(), video.getVideoCategory(), input);
				Integer videoId = videoService.addVideo(video);
=======
				File[] files= new File(CommonProperties.getBasePath()+CommonProperties.getTempFilePath()+userId).listFiles();
				if(files!=null && files.length>0){
					//if(files[0].getName().equals("temp"))
					FileInputStream       input   = new FileInputStream(files[0]);
					new ManageAWSVideos().createFiles("obs.1",files[0].getName(), userId+"/"+video.getVideoCategory(), input);
					video.setVideoUrl(AWS_URL+userId+"/"+video.getVideoCategory()+"/"+files[0].getName());
					Integer videoId = videoService.addVideo(video);
					//remove temp files
					files[0].delete();
				}
>>>>>>> .r170



			}
			status = new ResponseStatus(0, "Success");
		}
		catch(Exception e){
			e.printStackTrace();
			System.out.println(e.getMessage());
			status = new ResponseStatus(0, "Failure");
		}
		return new VideoMessage(status, video);
	}

	public VideosMessage getVideosByOwner(String token){
		ResponseStatus status = null;
		List<Video> videos = new ArrayList<Video>();
		boolean flag = loginServiceHelper.checkToken(token);
		if(!flag){
			status = new ResponseStatus(ResponseStatusCode.STATUS_UNAUTHORIZED, "UNAUTHORIZED");
			return new VideosMessage(status, videos);
		}
		int userId = loginServiceHelper.getUserByToken(token);
		if(userId>0){
			videos = videoService.getVideosByUser(userId);
		}
		return new VideosMessage(status, videos);
	}
	public VideosMessage getVideos(String val) {
		ResponseStatus status = null;
		List<Video> videosList =videoService.getAllVideos(val);
		status = new ResponseStatus(ResponseStatusCode.STATUS_OK, "OK");
		return  new VideosMessage(status, videosList);
	}


}
