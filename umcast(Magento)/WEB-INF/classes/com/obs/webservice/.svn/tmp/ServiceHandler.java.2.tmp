/**
 * Rest services handler
 * 
 */
package com.obs.webservice;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

import org.springframework.stereotype.Component;

import com.obs.model.Video;
import com.obs.webservice.messages.CommentMessage;
import com.obs.webservice.messages.CountMessage;
import com.obs.webservice.messages.CountriesMessage;
import com.obs.webservice.messages.ProfileMessage;
import com.obs.webservice.messages.ResponseStatus;
import com.obs.webservice.messages.ResponseStatusCode;
import com.obs.webservice.messages.ThumnailMessage;
import com.obs.webservice.messages.SettingsMessage;
import com.obs.webservice.messages.TokenMessage;
import com.obs.webservice.messages.UserMessage;
import com.obs.webservice.messages.UsersMessage;
import com.obs.webservice.messages.VideoMessage;
import com.obs.webservice.messages.VideosMessage;

/**
 * @author Ram
 *
 */
@Path("/rest/")
@Component
public class ServiceHandler {

	@Context
	private UriInfo context;
	@Context
	static HttpServletRequest request;
	@Context
	HttpServletResponse response;
	//Controller for User object
	String contextPath;

	UserServiceHelper userServiceHelper = UserServiceHelper.getInstance();
	VideoServiceHelper videoServiceHelper = VideoServiceHelper.getInstance();
	UserProfileServiceHelper userProfileServiceHelper=UserProfileServiceHelper.getInstance();
	LoginServiceHelper loginServiceHelper = LoginServiceHelper.getInstance();
	UserCommentServiceHelper userCommentServiceHelper=UserCommentServiceHelper.getInstance();
	/**
	 * Register user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/register")
	public UsersMessage registerJson(@Context HttpServletRequest req) {
		InputStream is = null;
		try {
			is = req.getInputStream();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return  userServiceHelper.registerUser(is);
	}


	/**
	 * Get users list is calling for JSON request
	 * @method : post
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getUsers")
	public UsersMessage getUsersJson() {
		return userServiceHelper.getUsers();
	}


	/**
	 * login user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/login")
	public TokenMessage loginJson(@Context HttpServletRequest req) {
		InputStream is = null;
		try {
			is = req.getInputStream();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return  userServiceHelper.loginUser(is);
	}

	/**
	 * login user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	//@Consumes(MediaType.APPLICATION_JSON)
	//@Produces(MediaType.APPLICATION_JSON)
	@Path("/videoUpload")
	public VideoMessage videoUpload(@Context HttpServletRequest req) {
		InputStream is = null;
		String token = null;
		try {
			is = req.getInputStream();
			token = req.getParameter("token");

		} catch (IOException e) {
			e.printStackTrace();
		}
		return  videoServiceHelper.saveVideo(is,token);
	}


	/**
	 * Get users list is calling for JSON request
	 * @method : post
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getVideosByOwner")
	public VideosMessage getVideosByOwnerJson(@Context HttpServletRequest req) {
		String token = null;
		try {
			token = req.getParameter("token");

		} catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getVideosByOwner(token);
	}


	/**
	 * Get country list is calling for JSON request
	 * @method : get
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getCountries")
	public CountriesMessage getCountriesJson() {
		return userServiceHelper.getCountries();
	}

	/**
	 * Get referred user list is calling for JSON request
	 * @method : get
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getMyReferrals")
	public UsersMessage getMyReferralsJson(@Context HttpServletRequest req) {
		String token = null;
		try {
			token = req.getParameter("token");

		} catch (Exception e) {
			e.printStackTrace();
		}
		return userServiceHelper.getMyReferrals(token);
	}

	/**
	 * Get referred user list is calling for JSON request
	 * @method : get
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getUserProfile")
	public UserMessage getUserProfileJson(@Context HttpServletRequest req) {
		String token = null;
		try {
			token = req.getParameter("token");

		} catch (Exception e) {
			e.printStackTrace();
		}
		return userServiceHelper.getUserProfile(token);
	}
	/**
	 * forgot password user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/forgotPassword")
	public TokenMessage forgotPasswordJson(@Context HttpServletRequest req) {
		InputStream is = null;
		try {
			is = req.getInputStream();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return  userServiceHelper.forgotPasswordUser(is);
	}
	/**
	 * reset password user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/resetPassword")
	public TokenMessage resetPasswordJson(@Context HttpServletRequest req) {
		InputStream is = null;
		try {
			is = req.getInputStream();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return  userServiceHelper.resetPasswordUser(is);
	}

	/**
	 * update user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/updateUser")
	public UserMessage updateUserJson(@Context HttpServletRequest req) {
		String token = null;
		InputStream is = null;
		try {
			token = req.getParameter("token");
			is = req.getInputStream();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return  userServiceHelper.updateUser(token,is);
	}
	/**
	 * change password user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/changePassword")
	public UserMessage changePasswordJson(@Context HttpServletRequest req) {
		String token = null;
		InputStream is = null;
		try {
			token = req.getParameter("token");
			is = req.getInputStream();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return  userServiceHelper.changePasswordUser(token,is);
	}
	/**
	 * Get country list is calling for JSON request
	 * @method : get
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getAllUsers")
	public UsersMessage getAllUsersJson() {
		return userServiceHelper.getUsers();
	}
	/**
	 * Get users count is calling for JSON request
	 * @method : post
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getUsersCount")
	public CountMessage getUsersCountJson() {
		return userServiceHelper.getUsersCount();
	}
	/**
	 * login user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/adminLogin")
	public TokenMessage adminLoginJson(@Context HttpServletRequest req) {
		InputStream is = null;
		try {
			is = req.getInputStream();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return  userServiceHelper.adminLoginUser(is);
	}
	/**
	 * get all videos in umchannel page
	 * @return
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getVideosByCategory")
	public VideosMessage getVideosJson(@Context HttpServletRequest req) {
		String sprtVal=null;
		try{
			sprtVal=req.getParameter("categId");
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getVideos(sprtVal);
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getVideosInfo")
	public VideosMessage getVideosInfoJson(@Context HttpServletRequest req) {
		Integer videoVal=0;
		try{
			videoVal=Integer.valueOf(req.getParameter("videoId"));
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getVideosInfo(videoVal);
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getVideosDetails")
	public VideosMessage getVideosDetailsJson(@Context HttpServletRequest req) {
		Integer videoVal=0;
		try{
			videoVal=Integer.valueOf(req.getParameter("videoId"));
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getVideosDetails(videoVal);
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getRelatedVideos")
	public VideosMessage getRelatedVideosJson(@Context HttpServletRequest req) {
		Integer videoCatVal=0;
		try{
			videoCatVal=Integer.valueOf(req.getParameter("videoCateId"));
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getRelatedVideos(videoCatVal);
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getMyVideos")
	public VideosMessage getMyVideosJson(@Context HttpServletRequest req) {
		String token = null;
		try {
			token = req.getParameter("token");

		} catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getMyVideos(token);
	}
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getProfileImage")
	public ProfileMessage getProfileImageJson(@Context HttpServletRequest req) {
		String token = null;
		String tokenId=null;
		try {
			if(req.getParameter("token")!=null ){
				token = req.getParameter("token");
			}
			else
			{
				tokenId = req.getParameter("tokenId");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return userProfileServiceHelper.getProfileImage(token,tokenId);
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getThumbnailFromTemp")
	public ThumnailMessage getThumbnailFromTempJson(@Context HttpServletRequest req) {
		String token = null;
		ResponseStatus status = null;
		List<String> thumnailList = new ArrayList<String>();
		try {
			token = req.getParameter("token");
			boolean flag = loginServiceHelper.checkToken(token);
			if(!flag){
				status = new ResponseStatus(ResponseStatusCode.STATUS_UNAUTHORIZED, "UNAUTHORIZED");
				return new ThumnailMessage(status, thumnailList);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getThumbnailFromTemp(token);
	}
	//get Login User 1st Video
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getLoginUserVideo")
	public VideoMessage getLoginUserVideoJson(@Context HttpServletRequest req) {
		String token = null;
		try {
			token = req.getParameter("token");

		} catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getLoginUserVideos(token);
	}
	//get login user videos
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getVideosByUser")
	public VideosMessage getVideosByUserJson(@Context HttpServletRequest req) {
		String token = null;
		try {
			token = req.getParameter("token");

		} catch (Exception e) {
			e.printStackTrace();
		}
		return videoServiceHelper.getUsersVideos(token);
	}

<<<<<<< .mine
	/**
	 * login user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */

	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/userComments")
	public CommentMessage userCommentsJson(@Context HttpServletRequest req) {
		InputStream is = null;
		String token = null;
		try {
			token = req.getParameter("token");
			is = req.getInputStream();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return  userCommentServiceHelper.userComments(is,token);
	}

=======
	/**
	 * Get referred user list is calling for JSON request
	 * @method : get
	 * @return JSON response contains status message and users
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getMenuSettings")
	public SettingsMessage getMenuSettingsJson(@Context HttpServletRequest req) {
		return userServiceHelper.getMenuSettings();
	}
	/**
	 * update user is calling for JSON  request
	 * @method : post
	 * @param req
	 * @return JSON response contains status message
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/updateMenuSettings")
	public SettingsMessage updateMenuSettingsJson(@Context HttpServletRequest req) {
		InputStream is = null;
		try {
			is = req.getInputStream();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return  userServiceHelper.updateMenuSettingsJson(is);
	}
	
>>>>>>> .r231
}
